% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adcf_sq_metric.R
\name{adcf_sq_metric}
\alias{adcf_sq_metric}
\alias{adcf_sq_metric.data.frame}
\alias{adcf_sq_metric_vec}
\alias{adcf_sq_metric.numeric}
\title{Auto-distance covariance metric}
\usage{
adcf_sq_metric(data, ...)

\method{adcf_sq_metric}{data.frame}(
  data,
  truth,
  ...,
  lags = 2:vctrs::vec_size(data) - 1,
  na_rm = TRUE,
  case_weights = NULL
)

adcf_sq_metric_vec(
  truth,
  estimate,
  lags = 2:vctrs::vec_size(truth) - 1,
  na_rm = TRUE,
  case_weights = NULL,
  ...
)

\method{adcf_sq_metric}{numeric}(data, lags = 1, case_weights = NULL, ...)
}
\arguments{
\item{data}{A \code{data.frame} containing the columns specified by \code{truth} and
\code{...}.}

\item{...}{A set of unquoted column names or one or more
\code{dplyr} selector functions to choose which variables contain the
class probabilities. If \code{truth} is binary, only 1 column should be selected,
and it should correspond to the value of \code{event_level}. Otherwise, there
should be as many columns as factor levels of \code{truth} and the ordering of
the columns should be the same as the factor levels of \code{truth}.}

\item{truth}{The column identifier for the true results (that is \code{numeric}).}

\item{lags}{Vector of positive integers. This corresponds to the lags at
which distance covariance should be evaluated.}

\item{na_rm}{A \code{logical} value indicating whether \code{NA}
values should be stripped before the computation proceeds.}

\item{case_weights}{The optional column identifier for case weights.
This should be an unquoted column name that evaluates to a numeric column
in \code{data}. For \verb{_vec()} functions, a numeric vector.}

\item{estimate}{The column identifier for the predicted results (that is also
\code{numeric})}
}
\value{
A \code{tibble} of class \code{adcf_tbl} with columns \code{lag},
\code{auto_dist_covariance} and \code{auto_dist_correlation}.
}
\description{
Auto-distance covariance metric
}
\examples{
# adcf ----------------------------------------------------------------------
data <- data.frame(t = rnorm(100), e = rnorm(100))
adcf_sq_metric(data, t, e)
}
